{"version":3,"file":"src_main_webapp_app_admin_metrics_metrics_module_ts.js","mappings":"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","sources":["./src/main/webapp/app/admin/metrics/blocks/jvm-memory/jvm-memory.component.ts","./src/main/webapp/app/admin/metrics/blocks/jvm-memory/jvm-memory.component.html","./src/main/webapp/app/admin/metrics/blocks/jvm-threads/jvm-threads.component.ts","./src/main/webapp/app/admin/metrics/blocks/jvm-threads/jvm-threads.component.html","./src/main/webapp/app/admin/metrics/blocks/metrics-cache/metrics-cache.component.ts","./src/main/webapp/app/admin/metrics/blocks/metrics-cache/metrics-cache.component.html","./src/main/webapp/app/admin/metrics/blocks/metrics-datasource/metrics-datasource.component.ts","./src/main/webapp/app/admin/metrics/blocks/metrics-datasource/metrics-datasource.component.html","./src/main/webapp/app/admin/metrics/blocks/metrics-endpoints-requests/metrics-endpoints-requests.component.ts","./src/main/webapp/app/admin/metrics/blocks/metrics-endpoints-requests/metrics-endpoints-requests.component.html","./src/main/webapp/app/admin/metrics/blocks/metrics-garbagecollector/metrics-garbagecollector.component.ts","./src/main/webapp/app/admin/metrics/blocks/metrics-garbagecollector/metrics-garbagecollector.component.html","./src/main/webapp/app/admin/metrics/blocks/metrics-modal-threads/metrics-modal-threads.component.ts","./src/main/webapp/app/admin/metrics/blocks/metrics-modal-threads/metrics-modal-threads.component.html","./src/main/webapp/app/admin/metrics/blocks/metrics-request/metrics-request.component.ts","./src/main/webapp/app/admin/metrics/blocks/metrics-request/metrics-request.component.html","./src/main/webapp/app/admin/metrics/blocks/metrics-system/metrics-system.component.ts","./src/main/webapp/app/admin/metrics/blocks/metrics-system/metrics-system.component.html","./src/main/webapp/app/admin/metrics/metrics.component.ts","./src/main/webapp/app/admin/metrics/metrics.component.html","./src/main/webapp/app/admin/metrics/metrics.model.ts","./src/main/webapp/app/admin/metrics/metrics.module.ts","./src/main/webapp/app/admin/metrics/metrics.route.ts","./src/main/webapp/app/admin/metrics/metrics.service.ts","./src/main/webapp/app/core/util/operators.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\n\nimport { JvmMetrics } from 'app/admin/metrics/metrics.model';\n\n@Component({\n  selector: 'jhi-jvm-memory',\n  templateUrl: './jvm-memory.component.html',\n})\nexport class JvmMemoryComponent {\n  /**\n   * object containing all jvm memory metrics\n   */\n  @Input() jvmMemoryMetrics?: { [key: string]: JvmMetrics };\n\n  /**\n   * boolean field saying if the metrics are in the process of being updated\n   */\n  @Input() updating?: boolean;\n}\n","<h4 jhiTranslate=\"metrics.jvm.memory.title\">Memory</h4>\n\n<div *ngIf=\"!updating && jvmMemoryMetrics\">\n  <div *ngFor=\"let entry of jvmMemoryMetrics | keyvalue\">\n    <span *ngIf=\"entry.value.max !== -1; else other\">\n      <span>{{ entry.key }}</span>\n      ({{ entry.value.used / 1048576 | number: '1.0-0' }}M / {{ entry.value.max / 1048576 | number: '1.0-0' }}M)\n    </span>\n\n    <div>Committed : {{ entry.value.committed / 1048576 | number: '1.0-0' }}M</div>\n\n    <ng-template #other\n      ><span\n        ><span>{{ entry.key }}</span> {{ entry.value.used / 1048576 | number: '1.0-0' }}M</span\n      ></ng-template\n    >\n\n    <ngb-progressbar\n      *ngIf=\"entry.value.max !== -1\"\n      type=\"success\"\n      [value]=\"(100 * entry.value.used) / entry.value.max\"\n      [striped]=\"true\"\n      [animated]=\"false\"\n    >\n      <span>{{ (entry.value.used * 100) / entry.value.max | number: '1.0-0' }}%</span>\n    </ngb-progressbar>\n  </div>\n</div>\n","import { Component, Input } from '@angular/core';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { Thread, ThreadState } from 'app/admin/metrics/metrics.model';\nimport { MetricsModalThreadsComponent } from '../metrics-modal-threads/metrics-modal-threads.component';\n\n@Component({\n  selector: 'jhi-jvm-threads',\n  templateUrl: './jvm-threads.component.html',\n})\nexport class JvmThreadsComponent {\n  threadStats = {\n    threadDumpAll: 0,\n    threadDumpRunnable: 0,\n    threadDumpTimedWaiting: 0,\n    threadDumpWaiting: 0,\n    threadDumpBlocked: 0,\n  };\n\n  @Input()\n  set threads(threads: Thread[] | undefined) {\n    this._threads = threads;\n\n    threads?.forEach(thread => {\n      if (thread.threadState === ThreadState.Runnable) {\n        this.threadStats.threadDumpRunnable += 1;\n      } else if (thread.threadState === ThreadState.Waiting) {\n        this.threadStats.threadDumpWaiting += 1;\n      } else if (thread.threadState === ThreadState.TimedWaiting) {\n        this.threadStats.threadDumpTimedWaiting += 1;\n      } else if (thread.threadState === ThreadState.Blocked) {\n        this.threadStats.threadDumpBlocked += 1;\n      }\n    });\n\n    this.threadStats.threadDumpAll =\n      this.threadStats.threadDumpRunnable +\n      this.threadStats.threadDumpWaiting +\n      this.threadStats.threadDumpTimedWaiting +\n      this.threadStats.threadDumpBlocked;\n  }\n\n  get threads(): Thread[] | undefined {\n    return this._threads;\n  }\n\n  private _threads: Thread[] | undefined;\n\n  constructor(private modalService: NgbModal) {}\n\n  open(): void {\n    const modalRef = this.modalService.open(MetricsModalThreadsComponent);\n    modalRef.componentInstance.threads = this.threads;\n  }\n}\n","<h4 jhiTranslate=\"metrics.jvm.threads.title\">Threads</h4>\n\n<span><span jhiTranslate=\"metrics.jvm.threads.runnable\">Runnable</span> {{ threadStats.threadDumpRunnable }}</span>\n\n<ngb-progressbar\n  [value]=\"threadStats.threadDumpRunnable\"\n  [max]=\"threadStats.threadDumpAll\"\n  [striped]=\"true\"\n  [animated]=\"false\"\n  type=\"success\"\n>\n  <span>{{ (threadStats.threadDumpRunnable * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n</ngb-progressbar>\n\n<span><span jhiTranslate=\"metrics.jvm.threads.timedwaiting\">Timed Waiting</span> ({{ threadStats.threadDumpTimedWaiting }})</span>\n\n<ngb-progressbar\n  [value]=\"threadStats.threadDumpTimedWaiting\"\n  [max]=\"threadStats.threadDumpAll\"\n  [striped]=\"true\"\n  [animated]=\"false\"\n  type=\"warning\"\n>\n  <span>{{ (threadStats.threadDumpTimedWaiting * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n</ngb-progressbar>\n\n<span><span jhiTranslate=\"metrics.jvm.threads.waiting\">Waiting</span> ({{ threadStats.threadDumpWaiting }})</span>\n\n<ngb-progressbar\n  [value]=\"threadStats.threadDumpWaiting\"\n  [max]=\"threadStats.threadDumpAll\"\n  [striped]=\"true\"\n  [animated]=\"false\"\n  type=\"warning\"\n>\n  <span>{{ (threadStats.threadDumpWaiting * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n</ngb-progressbar>\n\n<span><span jhiTranslate=\"metrics.jvm.threads.blocked\">Blocked</span> ({{ threadStats.threadDumpBlocked }})</span>\n\n<ngb-progressbar\n  [value]=\"threadStats.threadDumpBlocked\"\n  [max]=\"threadStats.threadDumpAll\"\n  [striped]=\"true\"\n  [animated]=\"false\"\n  type=\"success\"\n>\n  <span>{{ (threadStats.threadDumpBlocked * 100) / threadStats.threadDumpAll | number: '1.0-0' }}%</span>\n</ngb-progressbar>\n\n<div>Total: {{ threadStats.threadDumpAll }}</div>\n\n<button class=\"hand btn btn-primary btn-sm\" (click)=\"open()\" data-toggle=\"modal\" data-target=\"#threadDump\">\n  <span>Expand</span>\n</button>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { CacheMetrics } from 'app/admin/metrics/metrics.model';\nimport { filterNaN } from 'app/core/util/operators';\n\n@Component({\n  selector: 'jhi-metrics-cache',\n  templateUrl: './metrics-cache.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MetricsCacheComponent {\n  /**\n   * object containing all cache related metrics\n   */\n  @Input() cacheMetrics?: { [key: string]: CacheMetrics };\n\n  /**\n   * boolean field saying if the metrics are in the process of being updated\n   */\n  @Input() updating?: boolean;\n\n  filterNaN = (input: number): number => filterNaN(input);\n}\n","<h3 id=\"cacheMetrics\" jhiTranslate=\"metrics.cache.title\">Cache statistics</h3>\n\n<div class=\"table-responsive\" *ngIf=\"!updating && cacheMetrics\">\n  <table class=\"table table-striped\" aria-describedby=\"cacheMetrics\">\n    <thead>\n      <tr>\n        <th scope=\"col\" jhiTranslate=\"metrics.cache.cachename\">Cache name</th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.cache.hits\">Cache Hits</th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.cache.misses\">Cache Misses</th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.cache.gets\">Cache Gets</th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.cache.puts\">Cache Puts</th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.cache.removals\">Cache Removals</th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.cache.evictions\">Cache Evictions</th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.cache.hitPercent\">Cache Hit %</th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.cache.missPercent\">Cache Miss %</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let entry of cacheMetrics | keyvalue\">\n        <td>{{ entry.key }}</td>\n        <td class=\"text-end\">{{ entry.value['cache.gets.hit'] }}</td>\n        <td class=\"text-end\">{{ entry.value['cache.gets.miss'] }}</td>\n        <td class=\"text-end\">{{ entry.value['cache.gets.hit'] + entry.value['cache.gets.miss'] }}</td>\n        <td class=\"text-end\">{{ entry.value['cache.puts'] }}</td>\n        <td class=\"text-end\">{{ entry.value['cache.removals'] }}</td>\n        <td class=\"text-end\">{{ entry.value['cache.evictions'] }}</td>\n        <td class=\"text-end\">\n          {{\n            filterNaN((100 * entry.value['cache.gets.hit']) / (entry.value['cache.gets.hit'] + entry.value['cache.gets.miss']))\n              | number: '1.0-4'\n          }}\n        </td>\n        <td class=\"text-end\">\n          {{\n            filterNaN((100 * entry.value['cache.gets.miss']) / (entry.value['cache.gets.hit'] + entry.value['cache.gets.miss']))\n              | number: '1.0-4'\n          }}\n        </td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { Databases } from 'app/admin/metrics/metrics.model';\nimport { filterNaN } from 'app/core/util/operators';\n\n@Component({\n  selector: 'jhi-metrics-datasource',\n  templateUrl: './metrics-datasource.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MetricsDatasourceComponent {\n  /**\n   * object containing all datasource related metrics\n   */\n  @Input() datasourceMetrics?: Databases;\n\n  /**\n   * boolean field saying if the metrics are in the process of being updated\n   */\n  @Input() updating?: boolean;\n\n  filterNaN = (input: number): number => filterNaN(input);\n}\n","<h3 id=\"datasourceMetrics\" jhiTranslate=\"metrics.datasource.title\">DataSource statistics (time in millisecond)</h3>\n\n<div class=\"table-responsive\" *ngIf=\"!updating && datasourceMetrics\">\n  <table class=\"table table-striped\" aria-describedby=\"datasourceMetrics\">\n    <thead>\n      <tr>\n        <th scope=\"col\">\n          <span jhiTranslate=\"metrics.datasource.usage\">Connection Pool Usage</span> (active: {{ datasourceMetrics.active.value }}, min:\n          {{ datasourceMetrics.min.value }}, max: {{ datasourceMetrics.max.value }}, idle: {{ datasourceMetrics.idle.value }})\n        </th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.datasource.count\">Count</th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.datasource.mean\">Mean</th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.servicesstats.table.min\">Min</th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.servicesstats.table.p50\">p50</th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.servicesstats.table.p75\">p75</th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.servicesstats.table.p95\">p95</th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.servicesstats.table.p99\">p99</th>\n        <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.datasource.max\">Max</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr>\n        <td>Acquire</td>\n        <td class=\"text-end\">{{ datasourceMetrics.acquire.count }}</td>\n        <td class=\"text-end\">{{ filterNaN(datasourceMetrics.acquire.mean) | number: '1.0-2' }}</td>\n        <td class=\"text-end\">{{ datasourceMetrics.acquire['0.0'] | number: '1.0-3' }}</td>\n        <td class=\"text-end\">{{ datasourceMetrics.acquire['0.5'] | number: '1.0-3' }}</td>\n        <td class=\"text-end\">{{ datasourceMetrics.acquire['0.75'] | number: '1.0-3' }}</td>\n        <td class=\"text-end\">{{ datasourceMetrics.acquire['0.95'] | number: '1.0-3' }}</td>\n        <td class=\"text-end\">{{ datasourceMetrics.acquire['0.99'] | number: '1.0-3' }}</td>\n        <td class=\"text-end\">{{ filterNaN(datasourceMetrics.acquire.max) | number: '1.0-2' }}</td>\n      </tr>\n      <tr>\n        <td>Creation</td>\n        <td class=\"text-end\">{{ datasourceMetrics.creation.count }}</td>\n        <td class=\"text-end\">{{ filterNaN(datasourceMetrics.creation.mean) | number: '1.0-2' }}</td>\n        <td class=\"text-end\">{{ datasourceMetrics.creation['0.0'] | number: '1.0-3' }}</td>\n        <td class=\"text-end\">{{ datasourceMetrics.creation['0.5'] | number: '1.0-3' }}</td>\n        <td class=\"text-end\">{{ datasourceMetrics.creation['0.75'] | number: '1.0-3' }}</td>\n        <td class=\"text-end\">{{ datasourceMetrics.creation['0.95'] | number: '1.0-3' }}</td>\n        <td class=\"text-end\">{{ datasourceMetrics.creation['0.99'] | number: '1.0-3' }}</td>\n        <td class=\"text-end\">{{ filterNaN(datasourceMetrics.creation.max) | number: '1.0-2' }}</td>\n      </tr>\n      <tr>\n        <td>Usage</td>\n        <td class=\"text-end\">{{ datasourceMetrics.usage.count }}</td>\n        <td class=\"text-end\">{{ filterNaN(datasourceMetrics.usage.mean) | number: '1.0-2' }}</td>\n        <td class=\"text-end\">{{ datasourceMetrics.usage['0.0'] | number: '1.0-3' }}</td>\n        <td class=\"text-end\">{{ datasourceMetrics.usage['0.5'] | number: '1.0-3' }}</td>\n        <td class=\"text-end\">{{ datasourceMetrics.usage['0.75'] | number: '1.0-3' }}</td>\n        <td class=\"text-end\">{{ datasourceMetrics.usage['0.95'] | number: '1.0-3' }}</td>\n        <td class=\"text-end\">{{ datasourceMetrics.usage['0.99'] | number: '1.0-3' }}</td>\n        <td class=\"text-end\">{{ filterNaN(datasourceMetrics.usage.max) | number: '1.0-2' }}</td>\n      </tr>\n    </tbody>\n  </table>\n</div>\n","import { Component, Input } from '@angular/core';\n\nimport { Services } from 'app/admin/metrics/metrics.model';\n\n@Component({\n  selector: 'jhi-metrics-endpoints-requests',\n  templateUrl: './metrics-endpoints-requests.component.html',\n})\nexport class MetricsEndpointsRequestsComponent {\n  /**\n   * object containing service related metrics\n   */\n  @Input() endpointsRequestsMetrics?: Services;\n\n  /**\n   * boolean field saying if the metrics are in the process of being updated\n   */\n  @Input() updating?: boolean;\n}\n","<h3 id=\"endpointsRequestsMetrics\">Endpoints requests (time in millisecond)</h3>\n\n<div class=\"table-responsive\" *ngIf=\"!updating && endpointsRequestsMetrics\">\n  <table class=\"table table-striped\" aria-describedby=\"endpointsRequestsMetrics\">\n    <thead>\n      <tr>\n        <th scope=\"col\">Method</th>\n        <th scope=\"col\">Endpoint url</th>\n        <th scope=\"col\" class=\"text-end\">Count</th>\n        <th scope=\"col\" class=\"text-end\">Mean</th>\n      </tr>\n    </thead>\n    <tbody>\n      <ng-container *ngFor=\"let entry of endpointsRequestsMetrics | keyvalue\">\n        <tr *ngFor=\"let method of entry.value | keyvalue\">\n          <td>{{ method.key }}</td>\n          <td>{{ entry.key }}</td>\n          <td class=\"text-end\">{{ method.value!.count }}</td>\n          <td class=\"text-end\">{{ method.value!.mean | number: '1.0-3' }}</td>\n        </tr>\n      </ng-container>\n    </tbody>\n  </table>\n</div>\n","import { Component, Input } from '@angular/core';\n\nimport { GarbageCollector } from 'app/admin/metrics/metrics.model';\n\n@Component({\n  selector: 'jhi-metrics-garbagecollector',\n  templateUrl: './metrics-garbagecollector.component.html',\n})\nexport class MetricsGarbageCollectorComponent {\n  /**\n   * object containing garbage collector related metrics\n   */\n  @Input() garbageCollectorMetrics?: GarbageCollector;\n\n  /**\n   * boolean field saying if the metrics are in the process of being updated\n   */\n  @Input() updating?: boolean;\n}\n","<h3 id=\"garbageCollectorMetrics\" jhiTranslate=\"metrics.jvm.gc.title\">Garbage collector statistics</h3>\n\n<div class=\"row\">\n  <div class=\"col-md-4\">\n    <div *ngIf=\"garbageCollectorMetrics\">\n      <span>\n        GC Live Data Size/GC Max Data Size ({{ garbageCollectorMetrics['jvm.gc.live.data.size'] / 1048576 | number: '1.0-0' }}M /\n        {{ garbageCollectorMetrics['jvm.gc.max.data.size'] / 1048576 | number: '1.0-0' }}M)\n      </span>\n\n      <ngb-progressbar\n        [max]=\"garbageCollectorMetrics['jvm.gc.max.data.size']\"\n        [value]=\"garbageCollectorMetrics['jvm.gc.live.data.size']\"\n        [striped]=\"true\"\n        [animated]=\"false\"\n        type=\"success\"\n      >\n        <span>\n          {{\n            (100 * garbageCollectorMetrics['jvm.gc.live.data.size']) / garbageCollectorMetrics['jvm.gc.max.data.size'] | number: '1.0-2'\n          }}%\n        </span>\n      </ngb-progressbar>\n    </div>\n  </div>\n\n  <div class=\"col-md-4\">\n    <div *ngIf=\"garbageCollectorMetrics\">\n      <span>\n        GC Memory Promoted/GC Memory Allocated ({{ garbageCollectorMetrics['jvm.gc.memory.promoted'] / 1048576 | number: '1.0-0' }}M /\n        {{ garbageCollectorMetrics['jvm.gc.memory.allocated'] / 1048576 | number: '1.0-0' }}M)\n      </span>\n\n      <ngb-progressbar\n        [max]=\"garbageCollectorMetrics['jvm.gc.memory.allocated']\"\n        [value]=\"garbageCollectorMetrics['jvm.gc.memory.promoted']\"\n        [striped]=\"true\"\n        [animated]=\"false\"\n        type=\"success\"\n      >\n        <span>\n          {{\n            (100 * garbageCollectorMetrics['jvm.gc.memory.promoted']) / garbageCollectorMetrics['jvm.gc.memory.allocated']\n              | number: '1.0-2'\n          }}%\n        </span>\n      </ngb-progressbar>\n    </div>\n  </div>\n\n  <div id=\"garbageCollectorMetrics\" class=\"col-md-4\">\n    <div class=\"row\" *ngIf=\"garbageCollectorMetrics\">\n      <div class=\"col-md-9\">Classes loaded</div>\n      <div class=\"col-md-3 text-end\">{{ garbageCollectorMetrics.classesLoaded }}</div>\n    </div>\n    <div class=\"row\" *ngIf=\"garbageCollectorMetrics\">\n      <div class=\"col-md-9\">Classes unloaded</div>\n      <div class=\"col-md-3 text-end\">{{ garbageCollectorMetrics.classesUnloaded }}</div>\n    </div>\n  </div>\n\n  <div class=\"table-responsive\" *ngIf=\"!updating && garbageCollectorMetrics\">\n    <table class=\"table table-striped\" aria-describedby=\"garbageCollectorMetrics\">\n      <thead>\n        <tr>\n          <th scope=\"col\"></th>\n          <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.servicesstats.table.count\">Count</th>\n          <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.servicesstats.table.mean\">Mean</th>\n          <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.servicesstats.table.min\">Min</th>\n          <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.servicesstats.table.p50\">p50</th>\n          <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.servicesstats.table.p75\">p75</th>\n          <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.servicesstats.table.p95\">p95</th>\n          <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.servicesstats.table.p99\">p99</th>\n          <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.servicesstats.table.max\">Max</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>jvm.gc.pause</td>\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause'].count }}</td>\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause'].mean | number: '1.0-3' }}</td>\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.0'] | number: '1.0-3' }}</td>\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.5'] | number: '1.0-3' }}</td>\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.75'] | number: '1.0-3' }}</td>\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.95'] | number: '1.0-3' }}</td>\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause']['0.99'] | number: '1.0-3' }}</td>\n          <td class=\"text-end\">{{ garbageCollectorMetrics['jvm.gc.pause'].max | number: '1.0-3' }}</td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n","import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { NgbActiveModal } from '@ng-bootstrap/ng-bootstrap';\n\nimport { Thread, ThreadState } from 'app/admin/metrics/metrics.model';\n\n@Component({\n  selector: 'jhi-thread-modal',\n  templateUrl: './metrics-modal-threads.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MetricsModalThreadsComponent implements OnInit {\n  ThreadState = ThreadState;\n  threadStateFilter?: ThreadState;\n  threads?: Thread[];\n  threadDumpAll = 0;\n  threadDumpBlocked = 0;\n  threadDumpRunnable = 0;\n  threadDumpTimedWaiting = 0;\n  threadDumpWaiting = 0;\n\n  constructor(private activeModal: NgbActiveModal) {}\n\n  ngOnInit(): void {\n    this.threads?.forEach(thread => {\n      if (thread.threadState === ThreadState.Runnable) {\n        this.threadDumpRunnable += 1;\n      } else if (thread.threadState === ThreadState.Waiting) {\n        this.threadDumpWaiting += 1;\n      } else if (thread.threadState === ThreadState.TimedWaiting) {\n        this.threadDumpTimedWaiting += 1;\n      } else if (thread.threadState === ThreadState.Blocked) {\n        this.threadDumpBlocked += 1;\n      }\n    });\n\n    this.threadDumpAll = this.threadDumpRunnable + this.threadDumpWaiting + this.threadDumpTimedWaiting + this.threadDumpBlocked;\n  }\n\n  getBadgeClass(threadState: ThreadState): string {\n    if (threadState === ThreadState.Runnable) {\n      return 'bg-success';\n    } else if (threadState === ThreadState.Waiting) {\n      return 'bg-info';\n    } else if (threadState === ThreadState.TimedWaiting) {\n      return 'bg-warning';\n    } else if (threadState === ThreadState.Blocked) {\n      return 'bg-danger';\n    }\n    return '';\n  }\n\n  getThreads(): Thread[] {\n    return this.threads?.filter(thread => !this.threadStateFilter || thread.threadState === this.threadStateFilter) ?? [];\n  }\n\n  dismiss(): void {\n    this.activeModal.dismiss();\n  }\n}\n","<div class=\"modal-header\">\n  <h4 class=\"modal-title\" jhiTranslate=\"metrics.jvm.threads.dump.title\">Threads dump</h4>\n\n  <button type=\"button\" class=\"btn-close\" (click)=\"dismiss()\">&times;</button>\n</div>\n\n<div class=\"modal-body\">\n  <div class=\"mb-3\">\n    <span class=\"badge bg-primary hand\" (click)=\"threadStateFilter = undefined\">\n      <fa-icon *ngIf=\"threadStateFilter === undefined\" icon=\"check\"></fa-icon>\n      All&nbsp;<span class=\"badge rounded-pill bg-default\">{{ threadDumpAll }}</span>\n    </span>\n\n    <span class=\"badge bg-success hand\" (click)=\"threadStateFilter = ThreadState.Runnable\">\n      <fa-icon *ngIf=\"threadStateFilter === ThreadState.Runnable\" icon=\"check\"></fa-icon>\n      Runnable&nbsp;<span class=\"badge rounded-pill bg-default\">{{ threadDumpRunnable }}</span>\n    </span>\n\n    <span class=\"badge bg-info hand\" (click)=\"threadStateFilter = ThreadState.Waiting\">\n      <fa-icon *ngIf=\"threadStateFilter === ThreadState.Waiting\" icon=\"check\"></fa-icon>\n      Waiting&nbsp;<span class=\"badge rounded-pill bg-default\">{{ threadDumpWaiting }}</span>\n    </span>\n\n    <span class=\"badge bg-warning hand\" (click)=\"threadStateFilter = ThreadState.TimedWaiting\">\n      <fa-icon *ngIf=\"threadStateFilter === ThreadState.TimedWaiting\" icon=\"check\"></fa-icon>\n      Timed Waiting&nbsp;<span class=\"badge rounded-pill bg-default\">{{ threadDumpTimedWaiting }}</span>\n    </span>\n\n    <span class=\"badge bg-danger hand\" (click)=\"threadStateFilter = ThreadState.Blocked\">\n      <fa-icon *ngIf=\"threadStateFilter === ThreadState.Blocked\" icon=\"check\"></fa-icon>\n      Blocked&nbsp;<span class=\"badge rounded-pill bg-default\">{{ threadDumpBlocked }}</span>\n    </span>\n  </div>\n\n  <div class=\"pad\" *ngFor=\"let thread of getThreads()\">\n    <h6>\n      <span class=\"badge\" [ngClass]=\"getBadgeClass(thread.threadState)\">{{ thread.threadState }}</span>\n\n      &nbsp;{{ thread.threadName }} (ID {{ thread.threadId }})\n\n      <a (click)=\"thread.showThreadDump = !thread.showThreadDump\" href=\"javascript:void(0);\">\n        <span [hidden]=\"thread.showThreadDump\" jhiTranslate=\"metrics.jvm.threads.dump.show\">Show StackTrace</span>\n        <span [hidden]=\"!thread.showThreadDump\" jhiTranslate=\"metrics.jvm.threads.dump.hide\">Hide StackTrace</span>\n      </a>\n    </h6>\n\n    <div class=\"card\" [hidden]=\"!thread.showThreadDump\">\n      <div class=\"card-body\">\n        <div *ngFor=\"let st of thread.stackTrace\" class=\"break\">\n          <samp\n            >{{ st.className }}.{{ st.methodName }}(<code>{{ st.fileName }}:{{ st.lineNumber }}</code\n            >)</samp\n          >\n          <span class=\"mt-1\"></span>\n        </div>\n      </div>\n    </div>\n    <table class=\"table table-sm table-responsive\">\n      <caption>\n        Threads dump:\n        {{\n          thread.threadName\n        }}\n      </caption>\n      <thead>\n        <tr>\n          <th scope=\"col\" jhiTranslate=\"metrics.jvm.threads.dump.blockedtime\">Blocked Time</th>\n          <th scope=\"col\" jhiTranslate=\"metrics.jvm.threads.dump.blockedcount\">Blocked Count</th>\n          <th scope=\"col\" jhiTranslate=\"metrics.jvm.threads.dump.waitedtime\">Waited Time</th>\n          <th scope=\"col\" jhiTranslate=\"metrics.jvm.threads.dump.waitedcount\">Waited Count</th>\n          <th scope=\"col\" jhiTranslate=\"metrics.jvm.threads.dump.lockname\">Lock Name</th>\n        </tr>\n      </thead>\n      <tbody>\n        <tr>\n          <td>{{ thread.blockedTime }}</td>\n          <td>{{ thread.blockedCount }}</td>\n          <td>{{ thread.waitedTime }}</td>\n          <td>{{ thread.waitedCount }}</td>\n          <td class=\"thread-dump-modal-lock\" title=\"{{ thread.lockName }}\">\n            <code>{{ thread.lockName }}</code>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </div>\n</div>\n<div class=\"modal-footer\">\n  <button type=\"button\" class=\"btn btn-secondary float-start\" data-dismiss=\"modal\" (click)=\"dismiss()\">Done</button>\n</div>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { HttpServerRequests } from 'app/admin/metrics/metrics.model';\nimport { filterNaN } from 'app/core/util/operators';\n\n@Component({\n  selector: 'jhi-metrics-request',\n  templateUrl: './metrics-request.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MetricsRequestComponent {\n  /**\n   * object containing http request related metrics\n   */\n  @Input() requestMetrics?: HttpServerRequests;\n\n  /**\n   * boolean field saying if the metrics are in the process of being updated\n   */\n  @Input() updating?: boolean;\n\n  filterNaN = (input: number): number => filterNaN(input);\n}\n","<h3 id=\"requestMetrics\" jhiTranslate=\"metrics.jvm.http.title\">HTTP requests (time in millisecond)</h3>\n\n<table class=\"table table-striped\" *ngIf=\"!updating && requestMetrics\" aria-describedby=\"requestMetrics\">\n  <thead>\n    <tr>\n      <th scope=\"col\" jhiTranslate=\"metrics.jvm.http.table.code\">Code</th>\n      <th scope=\"col\" jhiTranslate=\"metrics.jvm.http.table.count\">Count</th>\n      <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.jvm.http.table.mean\">Mean</th>\n      <th scope=\"col\" class=\"text-end\" jhiTranslate=\"metrics.jvm.http.table.max\">Max</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let entry of requestMetrics['percode'] | keyvalue\">\n      <td>{{ entry.key }}</td>\n      <td>\n        <ngb-progressbar [max]=\"requestMetrics['all'].count\" [value]=\"entry.value.count\" [striped]=\"true\" [animated]=\"false\" type=\"success\">\n          <span>{{ entry.value.count }}</span>\n        </ngb-progressbar>\n      </td>\n      <td class=\"text-end\">\n        {{ filterNaN(entry.value.mean) | number: '1.0-2' }}\n      </td>\n      <td class=\"text-end\">{{ entry.value.max | number: '1.0-2' }}</td>\n    </tr>\n  </tbody>\n</table>\n","import { ChangeDetectionStrategy, Component, Input } from '@angular/core';\n\nimport { ProcessMetrics } from 'app/admin/metrics/metrics.model';\n\n@Component({\n  selector: 'jhi-metrics-system',\n  templateUrl: './metrics-system.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MetricsSystemComponent {\n  /**\n   * object containing thread related metrics\n   */\n  @Input() systemMetrics?: ProcessMetrics;\n\n  /**\n   * boolean field saying if the metrics are in the process of being updated\n   */\n  @Input() updating?: boolean;\n\n  convertMillisecondsToDuration(ms: number): string {\n    const times = {\n      year: 31557600000,\n      month: 2629746000,\n      day: 86400000,\n      hour: 3600000,\n      minute: 60000,\n      second: 1000,\n    };\n    let timeString = '';\n    for (const [key, value] of Object.entries(times)) {\n      if (Math.floor(ms / value) > 0) {\n        let plural = '';\n        if (Math.floor(ms / value) > 1) {\n          plural = 's';\n        }\n        timeString += `${Math.floor(ms / value).toString()} ${key.toString()}${plural} `;\n        ms = ms - value * Math.floor(ms / value);\n      }\n    }\n    return timeString;\n  }\n}\n","<h4>System</h4>\n\n<ng-container *ngIf=\"!updating && systemMetrics\">\n  <div class=\"row\">\n    <div class=\"col-md-4\">Uptime</div>\n    <div class=\"col-md-8 text-end\">{{ convertMillisecondsToDuration(systemMetrics['process.uptime']) }}</div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-4\">Start time</div>\n    <div class=\"col-md-8 text-end\">{{ systemMetrics['process.start.time'] | date: 'full' }}</div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-9\">Process CPU usage</div>\n    <div class=\"col-md-3 text-end\">{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</div>\n  </div>\n\n  <ngb-progressbar [value]=\"100 * systemMetrics['process.cpu.usage']\" [striped]=\"true\" [animated]=\"false\" type=\"success\">\n    <span>{{ 100 * systemMetrics['process.cpu.usage'] | number: '1.0-2' }} %</span>\n  </ngb-progressbar>\n\n  <div class=\"row\">\n    <div class=\"col-md-9\">System CPU usage</div>\n    <div class=\"col-md-3 text-end\">{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</div>\n  </div>\n\n  <ngb-progressbar [value]=\"100 * systemMetrics['system.cpu.usage']\" [striped]=\"true\" [animated]=\"false\" type=\"success\">\n    <span>{{ 100 * systemMetrics['system.cpu.usage'] | number: '1.0-2' }} %</span>\n  </ngb-progressbar>\n\n  <div class=\"row\">\n    <div class=\"col-md-9\">System CPU count</div>\n    <div class=\"col-md-3 text-end\">{{ systemMetrics['system.cpu.count'] }}</div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-9\">System 1m Load average</div>\n    <div class=\"col-md-3 text-end\">{{ systemMetrics['system.load.average.1m'] | number: '1.0-2' }}</div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-9\">Process files max</div>\n    <div class=\"col-md-3 text-end\">{{ systemMetrics['process.files.max'] | number: '1.0-0' }}</div>\n  </div>\n\n  <div class=\"row\">\n    <div class=\"col-md-9\">Process files open</div>\n    <div class=\"col-md-3 text-end\">{{ systemMetrics['process.files.open'] | number: '1.0-0' }}</div>\n  </div>\n</ng-container>\n","import { Component, OnInit, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { combineLatest } from 'rxjs';\n\nimport { MetricsService } from './metrics.service';\nimport { Metrics, Thread } from './metrics.model';\n\n@Component({\n  selector: 'jhi-metrics',\n  templateUrl: './metrics.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MetricsComponent implements OnInit {\n  metrics?: Metrics;\n  threads?: Thread[];\n  updatingMetrics = true;\n\n  constructor(private metricsService: MetricsService, private changeDetector: ChangeDetectorRef) {}\n\n  ngOnInit(): void {\n    this.refresh();\n  }\n\n  refresh(): void {\n    this.updatingMetrics = true;\n    combineLatest([this.metricsService.getMetrics(), this.metricsService.threadDump()]).subscribe(([metrics, threadDump]) => {\n      this.metrics = metrics;\n      this.threads = threadDump.threads;\n      this.updatingMetrics = false;\n      this.changeDetector.markForCheck();\n    });\n  }\n\n  metricsKeyExists(key: keyof Metrics): boolean {\n    return Boolean(this.metrics?.[key]);\n  }\n\n  metricsKeyExistsAndObjectNotEmpty(key: keyof Metrics): boolean {\n    return Boolean(this.metrics?.[key] && JSON.stringify(this.metrics[key]) !== '{}');\n  }\n}\n","<div>\n  <h2>\n    <span id=\"metrics-page-heading\" jhiTranslate=\"metrics.title\" data-cy=\"metricsPageHeading\">Application Metrics</span>\n\n    <button class=\"btn btn-primary float-end\" (click)=\"refresh()\">\n      <fa-icon icon=\"sync\"></fa-icon> <span jhiTranslate=\"metrics.refresh.button\">Refresh</span>\n    </button>\n  </h2>\n\n  <h3 jhiTranslate=\"metrics.jvm.title\">JVM Metrics</h3>\n\n  <div class=\"row\" *ngIf=\"metrics && !updatingMetrics\">\n    <jhi-jvm-memory class=\"col-md-4\" [updating]=\"updatingMetrics\" [jvmMemoryMetrics]=\"metrics.jvm\"></jhi-jvm-memory>\n\n    <jhi-jvm-threads class=\"col-md-4\" [threads]=\"threads\"></jhi-jvm-threads>\n\n    <jhi-metrics-system class=\"col-md-4\" [updating]=\"updatingMetrics\" [systemMetrics]=\"metrics.processMetrics\"></jhi-metrics-system>\n  </div>\n\n  <jhi-metrics-garbagecollector\n    *ngIf=\"metrics && metricsKeyExists('garbageCollector')\"\n    [updating]=\"updatingMetrics\"\n    [garbageCollectorMetrics]=\"metrics.garbageCollector\"\n  ></jhi-metrics-garbagecollector>\n\n  <div class=\"well well-lg\" *ngIf=\"updatingMetrics\" jhiTranslate=\"metrics.updating\">Updating...</div>\n\n  <jhi-metrics-request\n    *ngIf=\"metrics && metricsKeyExists('http.server.requests')\"\n    [updating]=\"updatingMetrics\"\n    [requestMetrics]=\"metrics['http.server.requests']\"\n  ></jhi-metrics-request>\n\n  <jhi-metrics-endpoints-requests\n    *ngIf=\"metrics && metricsKeyExists('services')\"\n    [updating]=\"updatingMetrics\"\n    [endpointsRequestsMetrics]=\"metrics.services\"\n  ></jhi-metrics-endpoints-requests>\n\n  <jhi-metrics-cache\n    *ngIf=\"metrics && metricsKeyExists('cache')\"\n    [updating]=\"updatingMetrics\"\n    [cacheMetrics]=\"metrics.cache\"\n  ></jhi-metrics-cache>\n\n  <jhi-metrics-datasource\n    *ngIf=\"metrics && metricsKeyExistsAndObjectNotEmpty('databases')\"\n    [updating]=\"updatingMetrics\"\n    [datasourceMetrics]=\"metrics.databases\"\n  ></jhi-metrics-datasource>\n</div>\n","export interface Metrics {\n  jvm: { [key: string]: JvmMetrics };\n  databases: Databases;\n  'http.server.requests': HttpServerRequests;\n  cache: { [key: string]: CacheMetrics };\n  garbageCollector: GarbageCollector;\n  services: Services;\n  processMetrics: ProcessMetrics;\n}\n\nexport interface JvmMetrics {\n  committed: number;\n  max: number;\n  used: number;\n}\n\nexport interface Databases {\n  min: Value;\n  idle: Value;\n  max: Value;\n  usage: MetricsWithPercentile;\n  pending: Value;\n  active: Value;\n  acquire: MetricsWithPercentile;\n  creation: MetricsWithPercentile;\n  connections: Value;\n}\n\nexport interface Value {\n  value: number;\n}\n\nexport interface MetricsWithPercentile {\n  '0.0': number;\n  '1.0': number;\n  max: number;\n  totalTime: number;\n  mean: number;\n  '0.5': number;\n  count: number;\n  '0.99': number;\n  '0.75': number;\n  '0.95': number;\n}\n\nexport interface HttpServerRequests {\n  all: {\n    count: number;\n  };\n  percode: { [key: string]: MaxMeanCount };\n}\n\nexport interface MaxMeanCount {\n  max: number;\n  mean: number;\n  count: number;\n}\n\nexport interface CacheMetrics {\n  'cache.gets.miss': number;\n  'cache.puts': number;\n  'cache.gets.hit': number;\n  'cache.removals': number;\n  'cache.evictions': number;\n}\n\nexport interface GarbageCollector {\n  'jvm.gc.max.data.size': number;\n  'jvm.gc.pause': MetricsWithPercentile;\n  'jvm.gc.memory.promoted': number;\n  'jvm.gc.memory.allocated': number;\n  classesLoaded: number;\n  'jvm.gc.live.data.size': number;\n  classesUnloaded: number;\n}\n\nexport interface Services {\n  [key: string]: {\n    [key in HttpMethod]?: MaxMeanCount;\n  };\n}\n\nexport enum HttpMethod {\n  Post = 'POST',\n  Get = 'GET',\n  Put = 'PUT',\n  Patch = 'PATCH',\n  Delete = 'DELETE',\n}\n\nexport interface ProcessMetrics {\n  'system.cpu.usage': number;\n  'system.cpu.count': number;\n  'system.load.average.1m'?: number;\n  'process.cpu.usage': number;\n  'process.files.max'?: number;\n  'process.files.open'?: number;\n  'process.start.time': number;\n  'process.uptime': number;\n}\n\nexport interface ThreadDump {\n  threads: Thread[];\n}\n\nexport interface Thread {\n  threadName: string;\n  threadId: number;\n  blockedTime: number;\n  blockedCount: number;\n  waitedTime: number;\n  waitedCount: number;\n  lockName: string | null;\n  lockOwnerId: number;\n  lockOwnerName: string | null;\n  daemon: boolean;\n  inNative: boolean;\n  suspended: boolean;\n  threadState: ThreadState;\n  priority: number;\n  stackTrace: StackTrace[];\n  lockedMonitors: LockedMonitor[];\n  lockedSynchronizers: string[];\n  lockInfo: LockInfo | null;\n  // custom field for showing-hiding thread dump\n  showThreadDump?: boolean;\n}\n\nexport interface LockInfo {\n  className: string;\n  identityHashCode: number;\n}\n\nexport interface LockedMonitor {\n  className: string;\n  identityHashCode: number;\n  lockedStackDepth: number;\n  lockedStackFrame: StackTrace;\n}\n\nexport interface StackTrace {\n  classLoaderName: string | null;\n  moduleName: string | null;\n  moduleVersion: string | null;\n  methodName: string;\n  fileName: string;\n  lineNumber: number;\n  className: string;\n  nativeMethod: boolean;\n}\n\nexport enum ThreadState {\n  Runnable = 'RUNNABLE',\n  TimedWaiting = 'TIMED_WAITING',\n  Waiting = 'WAITING',\n  Blocked = 'BLOCKED',\n  New = 'NEW',\n  Terminated = 'TERMINATED',\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule } from '@angular/router';\n\nimport { SharedModule } from 'app/shared/shared.module';\nimport { MetricsComponent } from './metrics.component';\nimport { metricsRoute } from './metrics.route';\nimport { JvmMemoryComponent } from './blocks/jvm-memory/jvm-memory.component';\nimport { JvmThreadsComponent } from './blocks/jvm-threads/jvm-threads.component';\nimport { MetricsCacheComponent } from './blocks/metrics-cache/metrics-cache.component';\nimport { MetricsDatasourceComponent } from './blocks/metrics-datasource/metrics-datasource.component';\nimport { MetricsEndpointsRequestsComponent } from './blocks/metrics-endpoints-requests/metrics-endpoints-requests.component';\nimport { MetricsGarbageCollectorComponent } from './blocks/metrics-garbagecollector/metrics-garbagecollector.component';\nimport { MetricsModalThreadsComponent } from './blocks/metrics-modal-threads/metrics-modal-threads.component';\nimport { MetricsRequestComponent } from './blocks/metrics-request/metrics-request.component';\nimport { MetricsSystemComponent } from './blocks/metrics-system/metrics-system.component';\n\n@NgModule({\n  imports: [SharedModule, RouterModule.forChild([metricsRoute])],\n  declarations: [\n    MetricsComponent,\n    JvmMemoryComponent,\n    JvmThreadsComponent,\n    MetricsCacheComponent,\n    MetricsDatasourceComponent,\n    MetricsEndpointsRequestsComponent,\n    MetricsGarbageCollectorComponent,\n    MetricsModalThreadsComponent,\n    MetricsRequestComponent,\n    MetricsSystemComponent,\n  ],\n})\nexport class MetricsModule {}\n","import { Route } from '@angular/router';\n\nimport { MetricsComponent } from './metrics.component';\n\nexport const metricsRoute: Route = {\n  path: '',\n  component: MetricsComponent,\n  data: {\n    pageTitle: 'metrics.title',\n  },\n};\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { ApplicationConfigService } from 'app/core/config/application-config.service';\nimport { Metrics, ThreadDump } from './metrics.model';\n\n@Injectable({ providedIn: 'root' })\nexport class MetricsService {\n  constructor(private http: HttpClient, private applicationConfigService: ApplicationConfigService) {}\n\n  getMetrics(): Observable<Metrics> {\n    return this.http.get<Metrics>(this.applicationConfigService.getEndpointFor('management/jhimetrics'));\n  }\n\n  threadDump(): Observable<ThreadDump> {\n    return this.http.get<ThreadDump>(this.applicationConfigService.getEndpointFor('management/threaddump'));\n  }\n}\n","/*\n * Function used to workaround https://github.com/microsoft/TypeScript/issues/16069\n * es2019 alternative `const filteredArr = myArr.flatMap((x) => x ? x : []);`\n */\nexport function isPresent<T>(t: T | undefined | null | void): t is T {\n  return t !== undefined && t !== null;\n}\n\nexport const filterNaN = (input: number): number => (isNaN(input) ? 0 : input);\n"],"names":[],"sourceRoot":"webpack:///"}