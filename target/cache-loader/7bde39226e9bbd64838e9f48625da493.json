{"remainingRequest":"/Users/technoidentity/Desktop/dsp-jhipter-app/node_modules/thread-loader/dist/cjs.js??ref--9-2!/Users/technoidentity/Desktop/dsp-jhipter-app/node_modules/ts-loader/index.js??ref--9-3!/Users/technoidentity/Desktop/dsp-jhipter-app/node_modules/eslint-loader/dist/cjs.js!/Users/technoidentity/Desktop/dsp-jhipter-app/src/main/webapp/app/layouts/profiles/profile.service.ts","dependencies":[{"path":"/Users/technoidentity/Desktop/dsp-jhipter-app/src/main/webapp/app/layouts/profiles/profile.service.ts","mtime":1720520697492},{"path":"/Users/technoidentity/Desktop/dsp-jhipter-app/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/Users/technoidentity/Desktop/dsp-jhipter-app/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/technoidentity/Desktop/dsp-jhipter-app/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/technoidentity/Desktop/dsp-jhipter-app/node_modules/ts-loader/index.js","mtime":499162500000},{"path":"/Users/technoidentity/Desktop/dsp-jhipter-app/node_modules/eslint-loader/dist/cjs.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICogYXMgdHNsaWJfMSBmcm9tICJ0c2xpYiI7CnZhciBfYTsKaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnOwppbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnOwppbXBvcnQgeyBtYXAsIHNoYXJlUmVwbGF5IH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnOwppbXBvcnQgeyBTRVJWRVJfQVBJX1VSTCB9IGZyb20gJ2FwcC9hcHAuY29uc3RhbnRzJzsKbGV0IFByb2ZpbGVTZXJ2aWNlID0gY2xhc3MgUHJvZmlsZVNlcnZpY2UgewogICAgY29uc3RydWN0b3IoaHR0cCkgewogICAgICAgIHRoaXMuaHR0cCA9IGh0dHA7CiAgICAgICAgdGhpcy5pbmZvVXJsID0gU0VSVkVSX0FQSV9VUkwgKyAnbWFuYWdlbWVudC9pbmZvJzsKICAgIH0KICAgIGdldFByb2ZpbGVJbmZvKCkgewogICAgICAgIGlmICh0aGlzLnByb2ZpbGVJbmZvJCkgewogICAgICAgICAgICByZXR1cm4gdGhpcy5wcm9maWxlSW5mbyQ7CiAgICAgICAgfQogICAgICAgIHRoaXMucHJvZmlsZUluZm8kID0gdGhpcy5odHRwLmdldCh0aGlzLmluZm9VcmwpLnBpcGUobWFwKChyZXNwb25zZSkgPT4gewogICAgICAgICAgICBjb25zdCBwcm9maWxlSW5mbyA9IHsKICAgICAgICAgICAgICAgIGFjdGl2ZVByb2ZpbGVzOiByZXNwb25zZS5hY3RpdmVQcm9maWxlcywKICAgICAgICAgICAgICAgIGluUHJvZHVjdGlvbjogcmVzcG9uc2UuYWN0aXZlUHJvZmlsZXMgJiYgcmVzcG9uc2UuYWN0aXZlUHJvZmlsZXMuaW5jbHVkZXMoJ3Byb2QnKSwKICAgICAgICAgICAgICAgIHN3YWdnZXJFbmFibGVkOiByZXNwb25zZS5hY3RpdmVQcm9maWxlcyAmJiByZXNwb25zZS5hY3RpdmVQcm9maWxlcy5pbmNsdWRlcygnc3dhZ2dlcicpCiAgICAgICAgICAgIH07CiAgICAgICAgICAgIGlmIChyZXNwb25zZS5hY3RpdmVQcm9maWxlcyAmJiByZXNwb25zZVsnZGlzcGxheS1yaWJib24tb24tcHJvZmlsZXMnXSkgewogICAgICAgICAgICAgICAgY29uc3QgZGlzcGxheVJpYmJvbk9uUHJvZmlsZXMgPSByZXNwb25zZVsnZGlzcGxheS1yaWJib24tb24tcHJvZmlsZXMnXS5zcGxpdCgnLCcpOwogICAgICAgICAgICAgICAgY29uc3QgcmliYm9uUHJvZmlsZXMgPSBkaXNwbGF5UmliYm9uT25Qcm9maWxlcy5maWx0ZXIocHJvZmlsZSA9PiByZXNwb25zZS5hY3RpdmVQcm9maWxlcyAmJiByZXNwb25zZS5hY3RpdmVQcm9maWxlcy5pbmNsdWRlcyhwcm9maWxlKSk7CiAgICAgICAgICAgICAgICBpZiAocmliYm9uUHJvZmlsZXMubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgICAgIHByb2ZpbGVJbmZvLnJpYmJvbkVudiA9IHJpYmJvblByb2ZpbGVzWzBdOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBwcm9maWxlSW5mbzsKICAgICAgICB9KSwgc2hhcmVSZXBsYXkoKSk7CiAgICAgICAgcmV0dXJuIHRoaXMucHJvZmlsZUluZm8kOwogICAgfQp9OwpQcm9maWxlU2VydmljZSA9IHRzbGliXzEuX19kZWNvcmF0ZShbCiAgICBJbmplY3RhYmxlKHsgcHJvdmlkZWRJbjogJ3Jvb3QnIH0pLAogICAgdHNsaWJfMS5fX21ldGFkYXRhKCJkZXNpZ246cGFyYW10eXBlcyIsIFt0eXBlb2YgKF9hID0gdHlwZW9mIEh0dHBDbGllbnQgIT09ICJ1bmRlZmluZWQiICYmIEh0dHBDbGllbnQpID09PSAiZnVuY3Rpb24iID8gX2EgOiBPYmplY3RdKQpdLCBQcm9maWxlU2VydmljZSk7CmV4cG9ydCB7IFByb2ZpbGVTZXJ2aWNlIH07Cg=="},{"version":3,"file":"/Users/technoidentity/Desktop/dsp-jhipter-app/src/main/webapp/app/layouts/profiles/profile.service.ts","sourceRoot":"","sources":["/Users/technoidentity/Desktop/dsp-jhipter-app/node_modules/eslint-loader/dist/cjs.js!/Users/technoidentity/Desktop/dsp-jhipter-app/src/main/webapp/app/layouts/profiles/profile.service.ts"],"names":[],"mappings":";;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAClD,OAAO,EAAE,GAAG,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAGlD,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AAInD,IAAa,cAAc,GAA3B,MAAa,cAAc;IAIzB,YAAoB,IAAgB;QAAhB,SAAI,GAAJ,IAAI,CAAY;QAH5B,YAAO,GAAG,cAAc,GAAG,iBAAiB,CAAC;IAGd,CAAC;IAExC,cAAc;QACZ,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,OAAO,IAAI,CAAC,YAAY,CAAC;SAC1B;QAED,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,GAAG,CAAe,IAAI,CAAC,OAAO,CAAC,CAAC,IAAI,CAChE,GAAG,CAAC,CAAC,QAAsB,EAAE,EAAE;YAC7B,MAAM,WAAW,GAAgB;gBAC/B,cAAc,EAAE,QAAQ,CAAC,cAAc;gBACvC,YAAY,EAAE,QAAQ,CAAC,cAAc,IAAI,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,MAAM,CAAC;gBACjF,cAAc,EAAE,QAAQ,CAAC,cAAc,IAAI,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,SAAS,CAAC;aACvF,CAAC;YACF,IAAI,QAAQ,CAAC,cAAc,IAAI,QAAQ,CAAC,4BAA4B,CAAC,EAAE;gBACrE,MAAM,uBAAuB,GAAG,QAAQ,CAAC,4BAA4B,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBAClF,MAAM,cAAc,GAAG,uBAAuB,CAAC,MAAM,CACnD,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,cAAc,IAAI,QAAQ,CAAC,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,CAChF,CAAC;gBACF,IAAI,cAAc,CAAC,MAAM,GAAG,CAAC,EAAE;oBAC7B,WAAW,CAAC,SAAS,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC;iBAC3C;aACF;YACD,OAAO,WAAW,CAAC;QACrB,CAAC,CAAC,EACF,WAAW,EAAE,CACd,CAAC;QACF,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;CACF,CAAA;AAjCY,cAAc;IAD1B,UAAU,CAAC,EAAE,UAAU,EAAE,MAAM,EAAE,CAAC;iEAKP,UAAU,oBAAV,UAAU;GAJzB,cAAc,CAiC1B;SAjCY,cAAc","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { Observable } from 'rxjs';\n\nimport { SERVER_API_URL } from 'app/app.constants';\nimport { ProfileInfo, InfoResponse } from './profile-info.model';\n\n@Injectable({ providedIn: 'root' })\nexport class ProfileService {\n  private infoUrl = SERVER_API_URL + 'management/info';\n  private profileInfo$!: Observable<ProfileInfo>;\n\n  constructor(private http: HttpClient) {}\n\n  getProfileInfo(): Observable<ProfileInfo> {\n    if (this.profileInfo$) {\n      return this.profileInfo$;\n    }\n\n    this.profileInfo$ = this.http.get<InfoResponse>(this.infoUrl).pipe(\n      map((response: InfoResponse) => {\n        const profileInfo: ProfileInfo = {\n          activeProfiles: response.activeProfiles,\n          inProduction: response.activeProfiles && response.activeProfiles.includes('prod'),\n          swaggerEnabled: response.activeProfiles && response.activeProfiles.includes('swagger')\n        };\n        if (response.activeProfiles && response['display-ribbon-on-profiles']) {\n          const displayRibbonOnProfiles = response['display-ribbon-on-profiles'].split(',');\n          const ribbonProfiles = displayRibbonOnProfiles.filter(\n            profile => response.activeProfiles && response.activeProfiles.includes(profile)\n          );\n          if (ribbonProfiles.length > 0) {\n            profileInfo.ribbonEnv = ribbonProfiles[0];\n          }\n        }\n        return profileInfo;\n      }),\n      shareReplay()\n    );\n    return this.profileInfo$;\n  }\n}\n"]}]}